= Dokspek =

== What is Dokspek? ==

Dokspek is an **executable specification documentation** system.

In a nutshell, you author **specification documents** using a **wiki markup** notation. You **insert Groovy scripts and classes** wherever you want, which are then **run as JUnit test cases**. Once the execution of your Groovy code is over, **customizable HTML reports are rendered** showing your prose, **syntax highlighted Groovy code**, and potential test failures and assertion errors.

== Getting started ==

To use Dokspek, you will need a few dependencies:
* a recent version of Groovy //(used for the inserted Groovy scripts with assertions)//
* the standalone XWiki rendering library //(for parsing the wiki markup documents and produce HTML reports)//
* XWiki's mini component manager //(used internally by XWiki Rendering to set up all components)//
* a recent version of JUnit //(to run your Groovy snippets as JUnit test cases)//

=== Dependencies and minimal Gradle build ===

The following Gradle build describes a minimal build file that you can use:

{{test name="gradle-build" run="false"}}
apply plugin: 'groovy'

repositories {
    mavenCentral()
}

dependencies {
    groovy 'org.codehaus.groovy:groovy-all:2.0.2'
    // compile 'org.codehaus.groovy.module.dokspek:dokspek:1.0'
    compile 'org.xwiki.commons:xwiki-commons-component-default:3.2'
    compile 'org.xwiki.rendering:xwiki-rendering-standalone:3.2'
    compile 'junit:junit:4.10'
}
{{/test}}

=== Using Dokspek's special JUnit runner ===

Before writing your first specification document, you will need to create a test class that will be run by Dokspek's custom JUnit runner, collecting all your specifications, extracting all the Groovy snippets, and executing them as JUnit tests.

Create a class in your test sources that looks like the below one:

{{test name="test-case" run="false"}}
import org.junit.runner.RunWith
import dokspek.junit.DokspekRunner

@RunWith(DokspekRunner)
class RunSpecifications { }
{{/test}}

With that test class created, you only need to run that class with JUnit, from your build tool or your IDE. For instance, if you use the proposed minimal Gradle build file, you would just have to run {{{gradle test}}} to have the tests embedded in your specification being run and have Dokspek produce the resulting HTML reports.

Dokspek expects to find some specific resources in default locations to find your specifications, the CSS stylesheets, JavaScript or images, as well as some templates to further customize the structure and appearance of your specification HTML reports.

=== Customizing directory locations ===

By default, Dokspek is searching for:
* **specifications** //(*.wiki files)// in {{{src/test/resources/dokspek/specifications}}}
* **assets** //(images, CSS, HTML, at the root of the directory)// in {{{src/test/resources/dokspek/assets}}}
* **templates** //(main.html and toc.html)// in {{{src/test/resources/dokspek/templates}}}
* **output directory** //(where you'll be able to find the rendered reports)// in {{{build/reports/dokspek}}}

If you want to change those defaults, you can use the {{{@Configuration}}} annotation. For example, the following test class configures different directories:

{{test name="test-case-with-configuration" run="false"}}
import org.junit.runner.RunWith
import dokspek.junit.DokspekRunner

@RunWith(DokspekRunner)
@Configuration(
    outputDirectory = 'target/reports',
    assetsDirectory = 'src/resources/assets',
    specificationDirectory = 'src/resources/specs',
    templateDirectory = 'src/resources/templates'
)
class RunSpecifications { }
{{/test}}

== Templates ==

Two templates are used for generating the HTML reports:
* {{{toc.html}}} which will contain a table of content, ie. a list of links to all the specification wiki documents
* {{{main.html}}} that is the main template used for rendering each specification document

The templates are actually Groovy templates, using Groovy's builtin template engine.

=== The table of content template ===

The Table of Content templates has access to a single variable called {{{docs}}} which represents a bean with two properties: the {{{title}}} and {{{content}}} of the specification document. In the table of content, you usually just need to care about the title.

The below example shows a lightweight template for your table of content, that you can build upon (adding styles, images, etc.):

{{html}}
<pre><code class="xml">&lt;!DOCTYPE html>
&lt;html>
    &lt;head>
        &lt;title>Table of Content&lt;/title>
    &lt;/head>
    &lt;body>
        &lt;h1>Table of Contents&lt;/h1>
        &lt;ul>
        <% docs.each { document -> %>
            &lt;li>&lt;a href="${document.title}.html">${document.title}&lt;/a>&lt;/li>
        <% } %>
        &lt;/ul>
    &lt;/body>
&lt;/html>
</code></pre>
{{/html}}

=== The main specification template ===

The main specification template has access to 4 variables:
* the {{{title}}} of the current specification
* the {{{content}}} of the current specification
* the {{{previous}}} document if any
* the {{{next}}} document if any

A basic main template can look like the following:

{{html}}
<pre><code class="xml">&lt;!DOCTYPE html>
&lt;html>
    &lt;head>
        &lt;title>${title}&lt;/title>
    &lt;/head>
    &lt;body>
        ${content}
        &lt;hr>
        &lt;% if (previous) { %>
            &lt;a href="${previous.title}.html">${previous.title}&lt;/a> |
        &lt;% } %>
        &lt;a href="index.html">Table of Content&lt;/a>
        &lt;% if (next) { %> |
            &lt;a href="${next.title}.html">${next.title}&lt;/a>
        &lt;% } %>
    &lt;/body>
&lt;/html>
</code></pre>
{{/html}}

== Assets to customize the reports ==

Your assets directory (potentially configured with {{{@Configuration}}}) can contain various resources you may need in the resulting HTML output, such as stylesheets, images, javascript code, etc. All the files should be at the root of that directory. Those assets will be copied in the output directory when the reports are being generated.

For the current document you are reading, the highlight.js JavaScript library was used to propose syntax highlighting for the Groovy and HTML code fragments.

== Authoring your specifications ==

With all that setup done, it's high time we write our first specification. A specification is a text file with a {{{.wiki}}} extension that is written using the XWiki 2.0 syntax. Be sure to read the documentation about the wiki markup supported.

In addition to all the various markup possibilities, Dokspek introduces a special "macro", called {{{test}}}, which is used to mark your Groovy snippets. These elements instruct Dokspek to run these snippets as JUnit tests. Here's a first example of test:

{{html}}
<pre><code class="groovy">Check that the addition of two numbers gives the correct result:

{{test name="addition-of-two-numbers"}}
    assert 1 + 2 == 3
{{/test}}
</code></pre>
{{/html}}

A test is actually a Groovy script, so it can also contain classes as well.

A test should have a (mandatory) unique name, so that you clearly know when a test fail which test it actually is.

=== Not running a test ===

For documentation purpose, for example, you might want certain Groovy snippets to not be run through the JUnit test runner. It is possible thanks to the {{{run}}} attribute:

{{html}}
<pre><code class="groovy">Example usage:

{{test name="example-usage" run="false"}}
    myObject.someMethod(1, 2, "abc")
{{/test}}
</code></pre>
{{/html}}

=== Expect a test to throw an exception ===

In your specification, you want to show that a certain usage of the API you are testing would yield an exception, then you can use the {{{throws}}} parameter to explicitly say that this piece of code should be run, and that Dokspek should check that a specific exception is thrown:

{{html}}
<pre><code class="groovy">Throw an exception:

{{test name="throws-an-exception" throws="java.io.IOException"}}
    throw new IOException("kaboom")
{{/test}}
</code></pre>
{{/html}}

=== Asserts a test should compile or not ===

As well as you can asserts that a snippet of code throws an exception, you can also check that a piece of code is not compilable, thanks to the {{{compiles}}} attribute:

{{html}}
<pre><code class="groovy">The following code is not compilable:

{{test name="non-compilable-code" compiles="false"}}
    if else abstract throw
{{/test}}
</code></pre>
{{/html}}

=== Split a test over several snippets ===

Writing a specification explaining several steps to be followed, you would want to insert some narratives between each steps, so that the flow of reading is easier and explanations can be placed appropriately. With the {{{dependsOn}}} attribute, you could split one test over several snippets. You can combine this attribute with {{{runs="false"}}} so that the first snippets aren't executed as is, and only the last one with the {{{dependsOn}}} attribute is ran, concatenating all the scripts depended upon together to run as a single unit of test.

Let's see that with an example:

{{html}}
<pre><code class="groovy">Given the following class:

{{test name="person-class" run="false"}}
    class Person {
        String name
        int age
    }
{{/test}}

When you instantiate that class:

{{test name="person-instance" run="false"}}
    def person = new Person(name: 'Guillaume', age: 34)
{{/test}}

Then you can check the values of the properties of that class:

{{test name="person-checks" dependsOn="person-class,person-instance"}}
    assert person.name == 'Guillaume'
    assert person.age == 34
{{/test}}
</code></pre>
{{/html}}

=== Hide a snippet ===

You might want to hide a particular snippet, for example to hide common imports or setup code that you don't want to repeat to focus on the task at hand, rather than on the boilerplate aspects surrounding the feature you want to test. The {{{hide}}} attribute will help you achieve that goal:

{{html}}
<pre><code class="groovy">{{test name="hidden-snippet" hidden="true"}}
    System.currentTimeMillis()
{{/test}}
</code></pre>
{{/html}}
