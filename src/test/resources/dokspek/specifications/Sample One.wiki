= Sample One =

{{toc numbered=yes start=2/}}

This is a **sample** //document//.

A few unordered elements:
* element one
** sub element
* element two
* element three

{{info}}
Some information
{{/info}}

{{warning}}
Some warning
{{/warning}}

{{error}}
Some error
{{/error}}

Ordered elements
1. element one
11. sub element
1. element two
1. element three

An external link: [[Guillaume Laforge's blog>>http://glaforge.appspot.com]]

A link to another document: [[Logical Branching>>Logical Branching.html]]

== Passing tests ==

{{test name="assert-true"}}
assert true
{{/test}}

== Failing tests ==

A test that fails with an exception{{footnote}}A missing method exception should be thrown in the example{{/footnote}}

{{test name="list-sum"}}
def list = [1, 2, 3]

assert list.sump() == 6
{{/test}}

A power assert failure example:

{{test name="power-assert"}}
def listOne = [1, 2, 3]
def expected = [2]

assert listOne.findAll { it % 2 } == expected
{{/test}}

== A test that should be run... or not! ==

{{test name="not-to-be-run" run="false"}}
throw "Don't run me!"
{{/test}}

{{test name="should-be-run" run="true"}}
"Run me!"
{{/test}}

== Hidden code snippets ==

We can have code snippets which are hidden. For example, if you want to hide common imports, etc.

Beginning of the hidden snippet...
{{test name="hidden-snippet" hidden="true"}}
System.currentTimeMillis()
{{/test}}
...end of the hidden snippet.

== An exception is expected ==

Here, an IOException is expected:

{{test name="an-exception" throws="java.io.IOException"}}
throw new IOException("kaboom")
{{/test}}

But here, a java.io.Exception was expected, but an UnsupportedOperationException is thrown:

{{test name="different-exception" throws="java.io.IOException"}}
throw new UnsupportedOperationException()
{{/test}}

== Assert that something shouldn't compile ==

This script shouldn't compile:

{{test name="not-compilable" compiles="false"}}
if foo
{{/test}}

== Tests spanning several snippets ==

Given the following class:

{{test name="person-class" run="false"}}
class Person {
    String name
    int age
}
{{/test}}

When you instantiate that class:

{{test name="person-instance" run="false"}}
def person = new Person(name: 'Guillaume', age: 34)
{{/test}}

Then you can check the values of the properties of that class:

{{test name="person-checks" dependsOn="person-class,person-instance"}}
assert person.name == 'Guillaume'
assert person.age == 34
{{/test}}